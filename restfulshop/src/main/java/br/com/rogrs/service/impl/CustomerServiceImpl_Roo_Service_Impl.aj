// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package br.com.rogrs.service.impl;

import br.com.rogrs.model.Customer;
import br.com.rogrs.model.CustomerFindByFirstNameAndLastName;
import br.com.rogrs.model.CustomerOrder;
import br.com.rogrs.repository.CustomerRepository;
import br.com.rogrs.service.api.CustomerOrderService;
import br.com.rogrs.service.impl.CustomerServiceImpl;
import io.springlets.data.domain.GlobalSearch;
import java.util.HashSet;
import java.util.Iterator;
import java.util.List;
import java.util.Set;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.annotation.Lazy;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

privileged aspect CustomerServiceImpl_Roo_Service_Impl {
    
    declare @type: CustomerServiceImpl: @Service;
    
    declare @type: CustomerServiceImpl: @Transactional(readOnly = true);
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    private CustomerRepository CustomerServiceImpl.customerRepository;
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    private CustomerOrderService CustomerServiceImpl.customerOrderService;
    
    /**
     * TODO Auto-generated constructor documentation
     * 
     * @param customerRepository
     * @param customerOrderService
     */
    @Autowired
    public CustomerServiceImpl.new(CustomerRepository customerRepository, @Lazy CustomerOrderService customerOrderService) {
        setCustomerRepository(customerRepository);
        setCustomerOrderService(customerOrderService);
    }

    /**
     * TODO Auto-generated method documentation
     * 
     * @return CustomerRepository
     */
    public CustomerRepository CustomerServiceImpl.getCustomerRepository() {
        return customerRepository;
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param customerRepository
     */
    public void CustomerServiceImpl.setCustomerRepository(CustomerRepository customerRepository) {
        this.customerRepository = customerRepository;
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @return CustomerOrderService
     */
    public CustomerOrderService CustomerServiceImpl.getCustomerOrderService() {
        return customerOrderService;
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param customerOrderService
     */
    public void CustomerServiceImpl.setCustomerOrderService(CustomerOrderService customerOrderService) {
        this.customerOrderService = customerOrderService;
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param customer
     * @param ordersToAdd
     * @return Customer
     */
    @Transactional
    public Customer CustomerServiceImpl.addToOrders(Customer customer, Iterable<Long> ordersToAdd) {
        List<CustomerOrder> orders = getCustomerOrderService().findAll(ordersToAdd);
        customer.addToOrders(orders);
        return getCustomerRepository().save(customer);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param customer
     * @param ordersToRemove
     * @return Customer
     */
    @Transactional
    public Customer CustomerServiceImpl.removeFromOrders(Customer customer, Iterable<Long> ordersToRemove) {
        List<CustomerOrder> orders = getCustomerOrderService().findAll(ordersToRemove);
        customer.removeFromOrders(orders);
        return getCustomerRepository().save(customer);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param customer
     * @param orders
     * @return Customer
     */
    @Transactional
    public Customer CustomerServiceImpl.setOrders(Customer customer, Iterable<Long> orders) {
        List<CustomerOrder> items = getCustomerOrderService().findAll(orders);
        Set<CustomerOrder> currents = customer.getOrders();
        Set<CustomerOrder> toRemove = new HashSet<CustomerOrder>();
        for (Iterator<CustomerOrder> iterator = currents.iterator(); iterator.hasNext();) {
            CustomerOrder nextCustomerOrder = iterator.next();
            if (items.contains(nextCustomerOrder)) {
                items.remove(nextCustomerOrder);
            } else {
                toRemove.add(nextCustomerOrder);
            }
        }
        customer.removeFromOrders(toRemove);
        customer.addToOrders(items);
        // Force the version update of the parent side to know that the parent has changed
        // because it has new books assigned
        customer.setVersion(customer.getVersion() + 1);
        return getCustomerRepository().save(customer);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param customer
     */
    @Transactional
    public void CustomerServiceImpl.delete(Customer customer) {
        // Clear bidirectional one-to-one parent relationship with Address
        customer.removeFromAddress();
        
        // Clear bidirectional one-to-many parent relationship with CustomerOrder
        for (CustomerOrder item : customer.getOrders()) {
            item.setCustomer(null);
        }
        
        getCustomerRepository().delete(customer);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param entities
     * @return List
     */
    @Transactional
    public List<Customer> CustomerServiceImpl.save(Iterable<Customer> entities) {
        return getCustomerRepository().save(entities);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param ids
     */
    @Transactional
    public void CustomerServiceImpl.delete(Iterable<Long> ids) {
        List<Customer> toDelete = getCustomerRepository().findAll(ids);
        getCustomerRepository().deleteInBatch(toDelete);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param entity
     * @return Customer
     */
    @Transactional
    public Customer CustomerServiceImpl.save(Customer entity) {
        
        // Ensure the relationships are maintained
        entity.addToAddress(entity.getAddress());
        
        return getCustomerRepository().save(entity);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param id
     * @return Customer
     */
    public Customer CustomerServiceImpl.findOne(Long id) {
        return getCustomerRepository().findOne(id);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param id
     * @return Customer
     */
    public Customer CustomerServiceImpl.findOneForUpdate(Long id) {
        return getCustomerRepository().findOneDetached(id);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param ids
     * @return List
     */
    public List<Customer> CustomerServiceImpl.findAll(Iterable<Long> ids) {
        return getCustomerRepository().findAll(ids);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @return List
     */
    public List<Customer> CustomerServiceImpl.findAll() {
        return getCustomerRepository().findAll();
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @return Long
     */
    public long CustomerServiceImpl.count() {
        return getCustomerRepository().count();
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param globalSearch
     * @param pageable
     * @return Page
     */
    public Page<Customer> CustomerServiceImpl.findAll(GlobalSearch globalSearch, Pageable pageable) {
        return getCustomerRepository().findAll(globalSearch, pageable);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param ids
     * @param globalSearch
     * @param pageable
     * @return Page
     */
    public Page<Customer> CustomerServiceImpl.findAllByIdsIn(List<Long> ids, GlobalSearch globalSearch, Pageable pageable) {
        return getCustomerRepository().findAllByIdsIn(ids, globalSearch, pageable);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param formBean
     * @param globalSearch
     * @param pageable
     * @return Page
     */
    public Page<Customer> CustomerServiceImpl.findByFirstNameAndLastName(CustomerFindByFirstNameAndLastName formBean, GlobalSearch globalSearch, Pageable pageable) {
        return getCustomerRepository().findByFirstNameAndLastName(formBean, globalSearch, pageable);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param formBean
     * @return Long
     */
    public long CustomerServiceImpl.countByFirstNameAndLastName(CustomerFindByFirstNameAndLastName formBean) {
        return getCustomerRepository().countByFirstNameAndLastName(formBean);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @return Class
     */
    public Class<Customer> CustomerServiceImpl.getEntityType() {
        return Customer.class;
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @return Class
     */
    public Class<Long> CustomerServiceImpl.getIdType() {
        return Long.class;
    }
    
}
