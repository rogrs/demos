// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package br.com.rogrs.web;

import br.com.rogrs.model.Customer;
import br.com.rogrs.model.CustomerOrder;
import br.com.rogrs.service.api.CustomerOrderService;
import br.com.rogrs.service.api.CustomerService;
import br.com.rogrs.web.CustomersItemOrdersJsonController;
import io.springlets.data.domain.GlobalSearch;
import io.springlets.web.NotFoundException;
import java.util.Collections;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

privileged aspect CustomersItemOrdersJsonController_Roo_JSON {
    
    declare @type: CustomersItemOrdersJsonController: @RestController;
    
    declare @type: CustomersItemOrdersJsonController: @RequestMapping(value = "/customers/{customer}/orders", name = "CustomersItemOrdersJsonController", produces = MediaType.APPLICATION_JSON_VALUE);
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    private CustomerService CustomersItemOrdersJsonController.customerService;
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    private CustomerOrderService CustomersItemOrdersJsonController.customerOrderService;
    
    /**
     * TODO Auto-generated constructor documentation
     * 
     * @param customerService
     * @param customerOrderService
     */
    @Autowired
    public CustomersItemOrdersJsonController.new(CustomerService customerService, CustomerOrderService customerOrderService) {
        this.customerService = customerService;
        this.customerOrderService = customerOrderService;
    }

    /**
     * TODO Auto-generated method documentation
     * 
     * @return CustomerService
     */
    public CustomerService CustomersItemOrdersJsonController.getCustomerService() {
        return customerService;
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param customerService
     */
    public void CustomersItemOrdersJsonController.setCustomerService(CustomerService customerService) {
        this.customerService = customerService;
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @return CustomerOrderService
     */
    public CustomerOrderService CustomersItemOrdersJsonController.getCustomerOrderService() {
        return customerOrderService;
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param customerOrderService
     */
    public void CustomersItemOrdersJsonController.setCustomerOrderService(CustomerOrderService customerOrderService) {
        this.customerOrderService = customerOrderService;
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param id
     * @return Customer
     */
    @ModelAttribute
    public Customer CustomersItemOrdersJsonController.getCustomer(@PathVariable("customer") Long id) {
        Customer customer = customerService.findOne(id);
        if (customer == null) {
            throw new NotFoundException(String.format("Customer with identifier '%s' not found",id));
        }
        return customer;
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param customer
     * @param globalSearch
     * @param pageable
     * @return ResponseEntity
     */
    @GetMapping(name = "listOrders")
    public ResponseEntity<Page<CustomerOrder>> CustomersItemOrdersJsonController.listOrders(@ModelAttribute Customer customer, GlobalSearch globalSearch, Pageable pageable) {
        
        Page<CustomerOrder> orders = getCustomerOrderService().findByCustomer(customer, globalSearch, pageable);
        return ResponseEntity.ok(orders);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param customer
     * @param ordersToAdd
     * @return ResponseEntity
     */
    @PostMapping(name = "addToOrders")
    public ResponseEntity<?> CustomersItemOrdersJsonController.addToOrders(@ModelAttribute Customer customer, @PathVariable("ordersToAdd") Long ordersToAdd) {
        getCustomerService().addToOrders(customer,Collections.singleton(ordersToAdd));
        return ResponseEntity.ok().build();
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param customer
     * @param ordersToAdd
     * @return ResponseEntity
     */
    @PostMapping(name = "addToOrdersBatch", value = "/batch")
    public ResponseEntity<?> CustomersItemOrdersJsonController.addToOrdersBatch(@ModelAttribute Customer customer, @RequestBody Iterable<Long> ordersToAdd) {
        getCustomerService().addToOrders(customer,ordersToAdd);
        return ResponseEntity.ok().build();
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param customer
     * @param ordersToRemove
     * @return ResponseEntity
     */
    @DeleteMapping(name = "removeFromOrders")
    public ResponseEntity<?> CustomersItemOrdersJsonController.removeFromOrders(@ModelAttribute Customer customer, @PathVariable("ordersToRemove") Long ordersToRemove) {
        getCustomerService().removeFromOrders(customer,Collections.singleton(ordersToRemove));
        return ResponseEntity.ok().build();
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param customer
     * @param ordersToRemove
     * @return ResponseEntity
     */
    @DeleteMapping(name = "removeFromOrdersBatch", value = "/batch")
    public ResponseEntity<?> CustomersItemOrdersJsonController.removeFromOrdersBatch(@ModelAttribute Customer customer, @RequestBody Iterable<Long> ordersToRemove) {
        getCustomerService().removeFromOrders(customer,ordersToRemove);
        return ResponseEntity.ok().build();
    }
    
}
