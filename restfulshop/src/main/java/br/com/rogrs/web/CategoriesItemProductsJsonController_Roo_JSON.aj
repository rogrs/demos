// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package br.com.rogrs.web;

import br.com.rogrs.model.Category;
import br.com.rogrs.model.Product;
import br.com.rogrs.service.api.CategoryService;
import br.com.rogrs.service.api.ProductService;
import br.com.rogrs.web.CategoriesItemProductsJsonController;
import io.springlets.data.domain.GlobalSearch;
import io.springlets.web.NotFoundException;
import java.util.Collections;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

privileged aspect CategoriesItemProductsJsonController_Roo_JSON {
    
    declare @type: CategoriesItemProductsJsonController: @RestController;
    
    declare @type: CategoriesItemProductsJsonController: @RequestMapping(value = "/categories/{category}/products", name = "CategoriesItemProductsJsonController", produces = MediaType.APPLICATION_JSON_VALUE);
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    private CategoryService CategoriesItemProductsJsonController.categoryService;
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    private ProductService CategoriesItemProductsJsonController.productService;
    
    /**
     * TODO Auto-generated constructor documentation
     * 
     * @param categoryService
     * @param productService
     */
    @Autowired
    public CategoriesItemProductsJsonController.new(CategoryService categoryService, ProductService productService) {
        this.categoryService = categoryService;
        this.productService = productService;
    }

    /**
     * TODO Auto-generated method documentation
     * 
     * @return CategoryService
     */
    public CategoryService CategoriesItemProductsJsonController.getCategoryService() {
        return categoryService;
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param categoryService
     */
    public void CategoriesItemProductsJsonController.setCategoryService(CategoryService categoryService) {
        this.categoryService = categoryService;
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @return ProductService
     */
    public ProductService CategoriesItemProductsJsonController.getProductService() {
        return productService;
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param productService
     */
    public void CategoriesItemProductsJsonController.setProductService(ProductService productService) {
        this.productService = productService;
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param id
     * @return Category
     */
    @ModelAttribute
    public Category CategoriesItemProductsJsonController.getCategory(@PathVariable("category") Long id) {
        Category category = categoryService.findOne(id);
        if (category == null) {
            throw new NotFoundException(String.format("Category with identifier '%s' not found",id));
        }
        return category;
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param categories
     * @param globalSearch
     * @param pageable
     * @return ResponseEntity
     */
    @GetMapping(name = "listProducts")
    public ResponseEntity<Page<Product>> CategoriesItemProductsJsonController.listProducts(@ModelAttribute Category categories, GlobalSearch globalSearch, Pageable pageable) {
        
        Page<Product> products = getProductService().findByCategoriesContains(categories, globalSearch, pageable);
        return ResponseEntity.ok(products);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param category
     * @param productsToAdd
     * @return ResponseEntity
     */
    @PostMapping(name = "addToProducts")
    public ResponseEntity<?> CategoriesItemProductsJsonController.addToProducts(@ModelAttribute Category category, @PathVariable("productsToAdd") Long productsToAdd) {
        getCategoryService().addToProducts(category,Collections.singleton(productsToAdd));
        return ResponseEntity.ok().build();
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param category
     * @param productsToAdd
     * @return ResponseEntity
     */
    @PostMapping(name = "addToProductsBatch", value = "/batch")
    public ResponseEntity<?> CategoriesItemProductsJsonController.addToProductsBatch(@ModelAttribute Category category, @RequestBody Iterable<Long> productsToAdd) {
        getCategoryService().addToProducts(category,productsToAdd);
        return ResponseEntity.ok().build();
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param category
     * @param productsToRemove
     * @return ResponseEntity
     */
    @DeleteMapping(name = "removeFromProducts")
    public ResponseEntity<?> CategoriesItemProductsJsonController.removeFromProducts(@ModelAttribute Category category, @PathVariable("productsToRemove") Long productsToRemove) {
        getCategoryService().removeFromProducts(category,Collections.singleton(productsToRemove));
        return ResponseEntity.ok().build();
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param category
     * @param productsToRemove
     * @return ResponseEntity
     */
    @DeleteMapping(name = "removeFromProductsBatch", value = "/batch")
    public ResponseEntity<?> CategoriesItemProductsJsonController.removeFromProductsBatch(@ModelAttribute Category category, @RequestBody Iterable<Long> productsToRemove) {
        getCategoryService().removeFromProducts(category,productsToRemove);
        return ResponseEntity.ok().build();
    }
    
}
