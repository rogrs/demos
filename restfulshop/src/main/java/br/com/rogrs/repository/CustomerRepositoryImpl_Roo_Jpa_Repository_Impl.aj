// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package br.com.rogrs.repository;

import br.com.rogrs.model.Customer;
import br.com.rogrs.model.CustomerFindByFirstNameAndLastName;
import br.com.rogrs.model.QCustomer;
import br.com.rogrs.repository.CustomerRepositoryImpl;
import com.querydsl.core.BooleanBuilder;
import com.querydsl.core.types.Path;
import com.querydsl.jpa.JPQLQuery;
import io.springlets.data.domain.GlobalSearch;
import io.springlets.data.jpa.repository.support.QueryDslRepositorySupportExt.AttributeMappingBuilder;
import java.util.List;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.transaction.annotation.Transactional;

privileged aspect CustomerRepositoryImpl_Roo_Jpa_Repository_Impl {
    
    declare @type: CustomerRepositoryImpl: @Transactional(readOnly = true);
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    public static final String CustomerRepositoryImpl.FIRST_NAME = "firstName";
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    public static final String CustomerRepositoryImpl.LAST_NAME = "lastName";
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    public static final String CustomerRepositoryImpl.ADDRESS = "address";
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param globalSearch
     * @param pageable
     * @return Page
     */
    public Page<Customer> CustomerRepositoryImpl.findAll(GlobalSearch globalSearch, Pageable pageable) {
        
        QCustomer customer = QCustomer.customer;
        
        JPQLQuery<Customer> query = from(customer).leftJoin(customer.address);
        
        Path<?>[] paths = new Path<?>[] {customer.firstName,customer.lastName,customer.address};        
        applyGlobalSearch(globalSearch, query, paths);
        
        AttributeMappingBuilder mapping = buildMapper()
			.map(FIRST_NAME, customer.firstName)
			.map(LAST_NAME, customer.lastName)
			.map(ADDRESS, customer.address);
        
        applyPagination(pageable, query, mapping);
        applyOrderById(query);
        
        return loadPage(query, pageable, customer);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param ids
     * @param globalSearch
     * @param pageable
     * @return Page
     */
    public Page<Customer> CustomerRepositoryImpl.findAllByIdsIn(List<Long> ids, GlobalSearch globalSearch, Pageable pageable) {
        
        QCustomer customer = QCustomer.customer;
        
        JPQLQuery<Customer> query = from(customer).leftJoin(customer.address);
        
        Path<?>[] paths = new Path<?>[] {customer.firstName,customer.lastName,customer.address};        
        applyGlobalSearch(globalSearch, query, paths);
        
        // Also, filter by the provided ids
        query.where(customer.id.in(ids));
        
        AttributeMappingBuilder mapping = buildMapper()
			.map(FIRST_NAME, customer.firstName)
			.map(LAST_NAME, customer.lastName)
			.map(ADDRESS, customer.address);
        
        applyPagination(pageable, query, mapping);
        applyOrderById(query);
        
        return loadPage(query, pageable, customer);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param formBean
     * @param globalSearch
     * @param pageable
     * @return Page
     */
    public Page<Customer> CustomerRepositoryImpl.findByFirstNameAndLastName(CustomerFindByFirstNameAndLastName formBean, GlobalSearch globalSearch, Pageable pageable) {
        
        QCustomer customer = QCustomer.customer;
        
        JPQLQuery<Customer> query = from(customer).leftJoin(customer.address);
        
        if (formBean != null) {
        BooleanBuilder searchCondition = new BooleanBuilder();
                if (formBean.getFirstName() != null) {
                        searchCondition.and(customer.firstName.eq(formBean.getFirstName()));
                }
                if (formBean.getLastName() != null) {
                        searchCondition.and(customer.lastName.eq(formBean.getLastName()));
                }
        if (searchCondition.hasValue()) {
            query.where(searchCondition);
        }
        }
        
        Path<?>[] paths = new Path<?>[] {customer.firstName,customer.lastName,customer.address};        
        applyGlobalSearch(globalSearch, query, paths);
        
        AttributeMappingBuilder mapping = buildMapper()
			.map(FIRST_NAME, customer.firstName)
			.map(LAST_NAME, customer.lastName)
			.map(ADDRESS, customer.address);
        
        applyPagination(pageable, query, mapping);
        applyOrderById(query);
        
        return loadPage(query, pageable, customer);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param formBean
     * @return Long
     */
    public long CustomerRepositoryImpl.countByFirstNameAndLastName(CustomerFindByFirstNameAndLastName formBean) {
        
        QCustomer customer = QCustomer.customer;
        
        JPQLQuery<Customer> query = from(customer);
        
        BooleanBuilder searchCondition = new BooleanBuilder();
                if (formBean.getFirstName() != null) {
                        searchCondition.and(customer.firstName.eq(formBean.getFirstName()));
                }
                if (formBean.getLastName() != null) {
                        searchCondition.and(customer.lastName.eq(formBean.getLastName()));
                }
        if (searchCondition.hasValue()) {
            query.where(searchCondition);
        }
        return query.fetchCount();
    }
    
}
